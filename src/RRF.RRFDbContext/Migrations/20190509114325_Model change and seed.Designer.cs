// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RRF.RRFDbContext;

namespace RRF.RRFDbContext.Migrations
{
    [DbContext(typeof(RRFDbContext))]
    [Migration("20190509114325_Model change and seed")]
    partial class Modelchangeandseed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "17418759-3857-4fc7-b552-11e3c42bd4ec",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "bd62219a-6b42-42f9-a74e-11c0407ec080",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("RRF.EFModels.Client", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("APIKey");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = "baa0d4c2-1589-4378-be1c-238612953ae1",
                            APIKey = new Guid("00000000-0000-0000-0000-000000000000"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eac5fb6e-00c3-4d9b-ac88-201b20cb1d03",
                            Email = "client@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT@MAIL.COM",
                            NormalizedUserName = "CLIENT@MAIL.COM",
                            PhoneNumber = "+359359",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "da48c608-d990-454a-8002-1c02db830e92",
                            TwoFactorEnabled = false,
                            UserName = "Client"
                        },
                        new
                        {
                            Id = "f05a7130-28fe-4a4f-9688-706ef78ad6ab",
                            APIKey = new Guid("00000000-0000-0000-0000-000000000000"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16cbd487-628d-4c64-b97a-7d8ee544033c",
                            Email = "admin@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP4SH5wXQ9SEvzVTd5FwCONsKj9WYXbfuxzMBeBK5XOEaG10YrZLvsroK5X+SzT7Yw==",
                            PhoneNumber = "+359359",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "cf7f4807-c63b-4226-b391-7b489cf9427f",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("RRF.EFModels.DescendingElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int?>("RssSettingDescendantElement_Id");

                    b.HasKey("Id");

                    b.HasIndex("RssSettingDescendantElement_Id")
                        .IsUnique()
                        .HasFilter("[RssSettingDescendantElement_Id] IS NOT NULL");

                    b.ToTable("DescendingElements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2019, 5, 9, 14, 43, 23, 887, DateTimeKind.Local).AddTicks(2731),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2019, 5, 9, 14, 43, 23, 887, DateTimeKind.Local).AddTicks(4243),
                            Name = "item",
                            RssSettingDescendantElement_Id = 1
                        });
                });

            modelBuilder.Entity("RRF.EFModels.ImageElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("ElementSubName");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int?>("RssSettingImageFormatElement_Id");

                    b.HasKey("Id");

                    b.HasIndex("RssSettingImageFormatElement_Id");

                    b.ToTable("ImageElements");
                });

            modelBuilder.Entity("RRF.EFModels.ModelElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ImageSRC");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LinkToCurrentElement");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("PubDate");

                    b.Property<int>("RssSettingDisplayModelElementId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("RssSettingDisplayModelElementId")
                        .IsUnique();

                    b.ToTable("ModelElements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2019, 5, 9, 14, 43, 23, 887, DateTimeKind.Local).AddTicks(9539),
                            Description = "<description>",
                            ImageSRC = "<image>",
                            IsDeleted = false,
                            LinkToCurrentElement = "<link>",
                            ModifiedOn = new DateTime(2019, 5, 9, 14, 43, 23, 888, DateTimeKind.Local).AddTicks(979),
                            PubDate = "<pubDate>",
                            RssSettingDisplayModelElementId = 1,
                            Title = "<title>"
                        });
                });

            modelBuilder.Entity("RRF.EFModels.RssChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<string>("URL");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("RssChannels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = "baa0d4c2-1589-4378-be1c-238612953ae1",
                            CreatedOn = new DateTime(2019, 5, 9, 14, 43, 23, 885, DateTimeKind.Local).AddTicks(7198),
                            IsDeleted = false,
                            Name = "testRssChannel",
                            URL = "https://www.vesti.bg/rss.php"
                        });
                });

            modelBuilder.Entity("RRF.EFModels.RssSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int?>("RssChanel_Id");

                    b.HasKey("Id");

                    b.HasIndex("RssChanel_Id")
                        .IsUnique()
                        .HasFilter("[RssChanel_Id] IS NOT NULL");

                    b.ToTable("RssSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = "baa0d4c2-1589-4378-be1c-238612953ae1",
                            CreatedOn = new DateTime(2019, 5, 9, 14, 43, 23, 886, DateTimeKind.Local).AddTicks(2241),
                            IsDeleted = false,
                            RssChanel_Id = 1
                        });
                });

            modelBuilder.Entity("RRF.EFModels.XElementModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int?>("RssSettingFormatElements_Id");

                    b.Property<string>("UseName");

                    b.HasKey("Id");

                    b.HasIndex("RssSettingFormatElements_Id");

                    b.ToTable("XElementsModels");
                });

            modelBuilder.Entity("RRF.EFModels.DescendingElement", b =>
                {
                    b.HasOne("RRF.EFModels.RssSetting", "RssSettingDescendantElement")
                        .WithOne("DescendantElement")
                        .HasForeignKey("RRF.EFModels.DescendingElement", "RssSettingDescendantElement_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RRF.EFModels.ImageElement", b =>
                {
                    b.HasOne("RRF.EFModels.RssSetting", "RssSettingImageFormatElement")
                        .WithMany("RssImageFormatElements")
                        .HasForeignKey("RssSettingImageFormatElement_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RRF.EFModels.ModelElement", b =>
                {
                    b.HasOne("RRF.EFModels.RssSetting", "RssSettingDisplayModelElement")
                        .WithOne("RssModelElements")
                        .HasForeignKey("RRF.EFModels.ModelElement", "RssSettingDisplayModelElementId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RRF.EFModels.RssChannel", b =>
                {
                    b.HasOne("RRF.EFModels.Client", "Client")
                        .WithMany("Channels")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RRF.EFModels.RssSetting", b =>
                {
                    b.HasOne("RRF.EFModels.RssChannel", "RssChannel")
                        .WithOne("RssSeting")
                        .HasForeignKey("RRF.EFModels.RssSetting", "RssChanel_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RRF.EFModels.XElementModel", b =>
                {
                    b.HasOne("RRF.EFModels.RssSetting", "RssSettingFormatElements")
                        .WithMany("RssFormatElements")
                        .HasForeignKey("RssSettingFormatElements_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
