// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RRF.RRFDbContext;

namespace RRF.RRFDbContext.Migrations
{
    [DbContext(typeof(RRFDbContext))]
    [Migration("20190509091900_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "d3a7ede8-7d40-4b97-adf3-2f9a5949fde0",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "60a9b667-900f-4177-81e4-5888c6af8396",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("RRF.EFModels.Client", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("APIKey");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = "baa0d4c2-1589-4378-be1c-238612953ae0",
                            APIKey = new Guid("00000000-0000-0000-0000-000000000000"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39fdce33-caea-4c21-bb57-21520ce17e74",
                            Email = "admin@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBSDDwKAK13kd4iy1GduBaZWBYhxoC7hBEVltFfDMFbYIs4C1zEw0HuMC8kuOj8+pA==",
                            PhoneNumber = "+359359",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "40667f44-4629-4f69-b402-bfece4ff9b8a",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("RRF.EFModels.DescendingElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int?>("RssSettingDescendantElement_Id");

                    b.HasKey("Id");

                    b.HasIndex("RssSettingDescendantElement_Id")
                        .IsUnique()
                        .HasFilter("[RssSettingDescendantElement_Id] IS NOT NULL");

                    b.ToTable("DescendingElements");
                });

            modelBuilder.Entity("RRF.EFModels.ImageElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("ElementSubName");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int?>("RssSettingImageFormatElement_Id");

                    b.HasKey("Id");

                    b.HasIndex("RssSettingImageFormatElement_Id");

                    b.ToTable("ImageElements");
                });

            modelBuilder.Entity("RRF.EFModels.ModelElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ImageSRC");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LinkToCurrentElement");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<DateTime>("PubDate");

                    b.Property<int>("RssSettingDisplayModelElementId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("RssSettingDisplayModelElementId")
                        .IsUnique();

                    b.ToTable("ModelElements");
                });

            modelBuilder.Entity("RRF.EFModels.RssChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<string>("URL");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("RssChannels");
                });

            modelBuilder.Entity("RRF.EFModels.RssSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ClientId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int?>("RssChanel_Id");

                    b.HasKey("Id");

                    b.HasIndex("RssChanel_Id")
                        .IsUnique()
                        .HasFilter("[RssChanel_Id] IS NOT NULL");

                    b.ToTable("RssSettings");
                });

            modelBuilder.Entity("RRF.EFModels.XElementModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int?>("RssSettingFormatElements_Id");

                    b.Property<string>("UseName");

                    b.HasKey("Id");

                    b.HasIndex("RssSettingFormatElements_Id");

                    b.ToTable("XElementsModels");
                });

            modelBuilder.Entity("RRF.EFModels.DescendingElement", b =>
                {
                    b.HasOne("RRF.EFModels.RssSetting", "RssSettingDescendantElement")
                        .WithOne("DescendantElement")
                        .HasForeignKey("RRF.EFModels.DescendingElement", "RssSettingDescendantElement_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RRF.EFModels.ImageElement", b =>
                {
                    b.HasOne("RRF.EFModels.RssSetting", "RssSettingImageFormatElement")
                        .WithMany("RssImageFormatElements")
                        .HasForeignKey("RssSettingImageFormatElement_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RRF.EFModels.ModelElement", b =>
                {
                    b.HasOne("RRF.EFModels.RssSetting", "RssSettingDisplayModelElement")
                        .WithOne("RssModelElements")
                        .HasForeignKey("RRF.EFModels.ModelElement", "RssSettingDisplayModelElementId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RRF.EFModels.RssChannel", b =>
                {
                    b.HasOne("RRF.EFModels.Client", "Client")
                        .WithMany("Channels")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RRF.EFModels.RssSetting", b =>
                {
                    b.HasOne("RRF.EFModels.RssChannel", "RssChannel")
                        .WithOne("RssSeting")
                        .HasForeignKey("RRF.EFModels.RssSetting", "RssChanel_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RRF.EFModels.XElementModel", b =>
                {
                    b.HasOne("RRF.EFModels.RssSetting", "RssSettingFormatElements")
                        .WithMany("RssFormatElements")
                        .HasForeignKey("RssSettingFormatElements_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
